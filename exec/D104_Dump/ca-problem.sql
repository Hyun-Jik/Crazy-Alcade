use ca;

insert into `problem` 
(`platform`, `no`, `title`, `description`, `input`, `output`, `time`, `memory`, `tier_id`, `created_at`, `updated_at`)
value
("BOJ", 1000, "A+B",
"두 정수 A와 B를 입력받은 다음, A+B를 출력하는 프로그램을 작성하시오.",
"첫째 줄에 A와 B가 주어진다. (0 < A, B < 10)",
"첫째 줄에 A+B를 출력한다.",
2, 128, 1, now(), now());

insert into `problem` 
(`platform`, `no`, `title`, `description`, `input`, `output`, `time`, `memory`, `tier_id`, `created_at`, `updated_at`)
value
("BOJ", 1085, "직사각형에서 탈출",
"한수는 지금 (x, y)에 있다. 직사각형은 각 변이 좌표축에 평행하고, 왼쪽 아래 꼭짓점은 (0, 0), 오른쪽 위 꼭짓점은 (w, h)에 있다. 직사각형의 경계선까지 가는 거리의 최솟값을 구하는 프로그램을 작성하시오.",
"첫째 줄에 x, y, w, h가 주어진다.\n• 1 ≤ w, h ≤ 1,000\n• 1 ≤ x ≤ w-1\n• 1 ≤ y ≤ h-1\nx, y, w, h는 정수",
"첫째 줄에 문제의 정답을 출력한다.",
2, 128, 1, now(), now());

insert into `problem` 
(`platform`, `no`, `title`, `description`, `input`, `output`, `time`, `memory`, `tier_id`, `created_at`, `updated_at`)
value
("BOJ", 1212, "8진수 2진수",
"8진수가 주어졌을 때, 2진수로 변환하는 프로그램을 작성하시오.",
"첫째 줄에 8진수가 주어진다. 주어지는 수의 길이는 333,334을 넘지 않는다.",
"첫째 줄에 주어진 수를 2진수로 변환하여 출력한다. 수가 0인 경우를 제외하고는 반드시 1로 시작해야 한다.",
2, 256, 1, now(), now());

insert into `problem` 
(`platform`, `no`, `title`, `description`, `input`, `output`, `time`, `memory`, `tier_id`, `created_at`, `updated_at`)
value
("BOJ", 1110, "더하기 사이클",
"0보다 크거나 같고, 99보다 작거나 같은 정수가 주어질 때 다음과 같은 연산을 할 수 있다. 먼저 주어진 수가 10보다 작다면 앞에 0을 붙여 두 자리 수로 만들고, 각 자리의 숫자를 더한다. 그 다음, 주어진 수의 가장 오른쪽 자리 수와 앞에서 구한 합의 가장 오른쪽 자리 수를 이어 붙이면 새로운 수를 만들 수 있다. 다음 예를 보자.\n\n26부터 시작한다. 2+6 = 8이다. 새로운 수는 68이다. 6+8 = 14이다. 새로운 수는 84이다. 8+4 = 12이다. 새로운 수는 42이다. 4+2 = 6이다. 새로운 수는 26이다.\n\n위의 예는 4번만에 원래 수로 돌아올 수 있다. 따라서 26의 사이클의 길이는 4이다.\n\nN이 주어졌을 때, N의 사이클의 길이를 구하는 프로그램을 작성하시오.",
"첫째 줄에 N이 주어진다. N은 0보다 크거나 같고, 99보다 작거나 같은 정수이다.",
"첫째 줄에 N의 사이클 길이를 출력한다.",
2, 128, 1, now(), now());

insert into `problem` 
(`platform`, `no`, `title`, `description`, `input`, `output`, `time`, `memory`, `tier_id`, `created_at`, `updated_at`)
value
("BOJ", 1157, "단어 공부",
"알파벳 대소문자로 된 단어가 주어지면, 이 단어에서 가장 많이 사용된 알파벳이 무엇인지 알아내는 프로그램을 작성하시오. 단, 대문자와 소문자를 구분하지 않는다.",
"첫째 줄에 알파벳 대소문자로 이루어진 단어가 주어진다. 주어지는 단어의 길이는 1,000,000을 넘지 않는다.",
"첫째 줄에 이 단어에서 가장 많이 사용된 알파벳을 대문자로 출력한다. 단, 가장 많이 사용된 알파벳이 여러 개 존재하는 경우에는 ?를 출력한다.",
2, 128, 1, now(), now());

insert into `problem` 
(`platform`, `no`, `title`, `description`, `input`, `output`, `time`, `memory`, `tier_id`, `created_at`, `updated_at`)
value
("BOJ", 11653, "소인수분해",
"정수 N이 주어졌을 때, 소인수분해하는 프로그램을 작성하시오.",
"첫째 줄에 정수 N (1 ≤ N ≤ 10,000,000)이 주어진다.",
"N의 소인수분해 결과를 한 줄에 하나씩 오름차순으로 출력한다. N이 1인 경우 아무것도 출력하지 않는다.", 
1, 256, 1, now(), now());

insert into `problem` 
(`platform`, `no`, `title`, `description`, `input`, `output`, `time`, `memory`, `tier_id`, `created_at`, `updated_at`)
value
("BOJ", 2908, "상수",
"상근이의 동생 상수는 수학을 정말 못한다. 상수는 숫자를 읽는데 문제가 있다. 이렇게 수학을 못하는 상수를 위해서 상근이는 수의 크기를 비교하는 문제를 내주었다. 상근이는 세 자리 수 두 개를 칠판에 써주었다. 그 다음에 크기가 큰 수를 말해보라고 했다.\n\n상수는 수를 다른 사람과 다르게 거꾸로 읽는다. 예를 들어, 734와 893을 칠판에 적었다면, 상수는 이 수를 437과 398로 읽는다. 따라서, 상수는 두 수중 큰 수인 437을 큰 수라고 말할 것이다.\n\n두 수가 주어졌을 때, 상수의 대답을 출력하는 프로그램을 작성하시오.",
"첫째 줄에 상근이가 칠판에 적은 두 수 A와 B가 주어진다. 두 수는 같지 않은 세 자리 수이며, 0이 포함되어 있지 않다.", 
"첫째 줄에 상수의 대답을 출력한다.",
1, 128, 1, now(), now());

insert into `problem` 
(`platform`, `no`, `title`, `description`, `input`, `output`, `time`, `memory`, `tier_id`, `created_at`, `updated_at`)
value
("BOJ", 10162, "전자레인지",
"3개의 시간조절용 버튼 A B C가 달린 전자레인지가 있다. 각 버튼마다 일정한 시간이 지정되어 있어 해당 버튼을 한번 누를 때마다 그 시간이 동작시간에 더해진다. 버튼 A, B, C에 지정된 시간은 각각 5분, 1분, 10초이다.\n\n냉동음식마다 전자레인지로 요리해야할 시간 T가 초단위로 표시되어 있다. 우리는 A, B, C 3개의 버튼을 적절히 눌러서 그 시간의 합이 정확히 T초가 되도록 해야 한다. 단 버튼 A, B, C를 누른 횟수의 합은 항상 최소가 되어야 한다. 이것을 최소버튼 조작이라고 한다.\n\n만일 요리시간이 100초라고 하면(T=100) B를 1번, C는 4번 누르면 된다. 이와 다르게 C를 10번 눌러도 100초가 되지만 이 경우 10번은 최소 횟수가 아니기 때문이 답이 될 수 없다. 이 경우 B 1번, C 4번, 총 5번이 최소버튼 조작이다. 그리고 T=234와 같이 3개의 버튼으로 시간을 정확히 맞출 수 없는 경우도 있다.\n\n여러분은 주어진 요리시간 T초를 맞추기 위한 최소버튼 조작 방법을 구하는 프로그램을 작성해야 한다.",
"첫 번째 줄에는 요리시간 T(초)가 정수로 주어져 있으며 그 범위는 1 ≤ T ≤ 10,000 이다.",
"여러분은 T초를 위한 최소버튼 조작의 A B C 횟수를 첫 줄에 차례대로 출력해야 한다. 각각의 횟수 사이에는 빈 칸을 둔다. 해당 버튼을 누르지 않는 경우에는 숫자 0을 출력해야한다. 만일 제시된 3개의 버튼으로 T초를 맞출 수 없으면 음수 -1을 첫 줄에 출력해야 한다.",
1, 64, 1, now(), now());

insert into `problem` 
(`platform`, `no`, `title`, `description`, `input`, `output`, `time`, `memory`, `tier_id`, `created_at`, `updated_at`)
value
("BOJ", 1065, "한수",
"어떤 양의 정수 X의 각 자리가 등차수열을 이룬다면, 그 수를 한수라고 한다. 등차수열은 연속된 두 개의 수의 차이가 일정한 수열을 말한다. N이 주어졌을 때, 1보다 크거나 같고, N보다 작거나 같은 한수의 개수를 출력하는 프로그램을 작성하시오.",
"첫째 줄에 1,000보다 작거나 같은 자연수 N이 주어진다.",
"첫째 줄에 1보다 크거나 같고, N보다 작거나 같은 한수의 개수를 출력한다.",
2, 128, 2, now(), now());

insert into `problem` 
(`platform`, `no`, `title`, `description`, `input`, `output`, `time`, `memory`, `tier_id`, `created_at`, `updated_at`)
value
("BOJ", 2164, "카드2",
"N장의 카드가 있다. 각각의 카드는 차례로 1부터 N까지의 번호가 붙어 있으며, 1번 카드가 제일 위에, N번 카드가 제일 아래인 상태로 순서대로 카드가 놓여 있다.\n\n이제 다음과 같은 동작을 카드가 한 장 남을 때까지 반복하게 된다. 우선, 제일 위에 있는 카드를 바닥에 버린다. 그 다음, 제일 위에 있는 카드를 제일 아래에 있는 카드 밑으로 옮긴다.\n\n예를 들어 N=4인 경우를 생각해 보자. 카드는 제일 위에서부터 1234 의 순서로 놓여있다. 1을 버리면 234가 남는다. 여기서 2를 제일 아래로 옮기면 342가 된다. 3을 버리면 42가 되고, 4를 밑으로 옮기면 24가 된다. 마지막으로 2를 버리고 나면, 남는 카드는 4가 된다.\n\nN이 주어졌을 때, 제일 마지막에 남게 되는 카드를 구하는 프로그램을 작성하시오.",
"첫째 줄에 정수 N(1 ≤ N ≤ 500,000)이 주어진다.",
"첫째 줄에 남게 되는 카드의 번호를 출력한다.",
2, 128, 2, now(), now());

insert into `problem` 
(`platform`, `no`, `title`, `description`, `input`, `output`, `time`, `memory`, `tier_id`, `created_at`, `updated_at`)
value
("BOJ", 11726, "2×n 타일링",
"2×n 크기의 직사각형을 1×2, 2×1 타일로 채우는 방법의 수를 구하는 프로그램을 작성하시오.",
"첫째 줄에 n이 주어진다. (1 ≤ n ≤ 1,000)",
"첫째 줄에 2×n 크기의 직사각형을 채우는 방법의 수를 10,007로 나눈 나머지를 출력한다.",
1, 256, 2, now(), now());

insert into `problem` 
(`platform`, `no`, `title`, `description`, `input`, `output`, `time`, `memory`, `tier_id`, `created_at`, `updated_at`)
value
("BOJ", 1018, "체스판 다시 칠하기",
"지민이는 자신의 저택에서 MN개의 단위 정사각형으로 나누어져 있는 M×N 크기의 보드를 찾았다. 어떤 정사각형은 검은색으로 칠해져 있고, 나머지는 흰색으로 칠해져 있다. 지민이는 이 보드를 잘라서 8×8 크기의 체스판으로 만들려고 한다.\n\n체스판은 검은색과 흰색이 번갈아서 칠해져 있어야 한다. 구체적으로, 각 칸이 검은색과 흰색 중 하나로 색칠되어 있고, 변을 공유하는 두 개의 사각형은 다른 색으로 칠해져 있어야 한다. 따라서 이 정의를 따르면 체스판을 색칠하는 경우는 두 가지뿐이다. 하나는 맨 왼쪽 위 칸이 흰색인 경우, 하나는 검은색인 경우이다.\n\n보드가 체스판처럼 칠해져 있다는 보장이 없어서, 지민이는 8×8 크기의 체스판으로 잘라낸 후에 몇 개의 정사각형을 다시 칠해야겠다고 생각했다. 당연히 8*8 크기는 아무데서나 골라도 된다. 지민이가 다시 칠해야 하는 정사각형의 최소 개수를 구하는 프로그램을 작성하시오.",
"첫째 줄에 N과 M이 주어진다. N과 M은 8보다 크거나 같고, 50보다 작거나 같은 자연수이다. 둘째 줄부터 N개의 줄에는 보드의 각 행의 상태가 주어진다. B는 검은색이며, W는 흰색이다.",
"첫째 줄에 지민이가 다시 칠해야 하는 정사각형 개수의 최솟값을 출력한다.",
2, 128, 2, now(), now());

insert into `problem` 
(`platform`, `no`, `title`, `description`, `input`, `output`, `time`, `memory`, `tier_id`, `created_at`, `updated_at`)
value
("BOJ", 1789, "수들의 합",
"서로 다른 N개의 자연수의 합이 S라고 한다. S를 알 때, 자연수 N의 최댓값은 얼마일까?",
"첫째 줄에 자연수 S(1 ≤ S ≤ 4,294,967,295)가 주어진다.",
"첫째 줄에 자연수 N의 최댓값을 출력한다.",
2, 128, 2, now(), now());

insert into `problem` 
(`platform`, `no`, `title`, `description`, `input`, `output`, `time`, `memory`, `tier_id`, `created_at`, `updated_at`)
value
("BOJ", 15989, "1, 2, 3 더하기 4",
"정수 4를 1, 2, 3의 합으로 나타내는 방법은 총 4가지가 있다. 합을 나타낼 때는 수를 1개 이상 사용해야 한다. 합을 이루고 있는 수의 순서만 다른 것은 같은 것으로 친다.\n\n· 1+1+1+1\n· 2+1+1 (1+1+2, 1+2+1)\n· 2+2\n· 1+3 (3+1)\n\n정수 n이 주어졌을 때, n을 1, 2, 3의 합으로 나타내는 방법의 수를 구하는 프로그램을 작성하시오.",
"첫째 줄에 테스트 케이스의 개수 T가 주어진다. 각 테스트 케이스는 한 줄로 이루어져 있고, 정수 n이 주어진다. n은 양수이며 10,000보다 작거나 같다.",
"각 테스트 케이스마다, n을 1, 2, 3의 합으로 나타내는 방법의 수를 출력한다.",
1, 512, 3, now(), now());

insert into `problem` 
(`platform`, `no`, `title`, `description`, `input`, `output`, `time`, `memory`, `tier_id`, `created_at`, `updated_at`)
value
("BOJ", 1759, "암호 만들기",
"바로 어제 최백준 조교가 방 열쇠를 주머니에 넣은 채 깜빡하고 서울로 가 버리는 황당한 상황에 직면한 조교들은, 702호에 새로운 보안 시스템을 설치하기로 하였다. 이 보안 시스템은 열쇠가 아닌 암호로 동작하게 되어 있는 시스템이다.\n\n암호는 서로 다른 L개의 알파벳 소문자들로 구성되며 최소 한 개의 모음(a, e, i, o, u)과 최소 두 개의 자음으로 구성되어 있다고 알려져 있다. 또한 정렬된 문자열을 선호하는 조교들의 성향으로 미루어 보아 암호를 이루는 알파벳이 암호에서 증가하는 순서로 배열되었을 것이라고 추측된다. 즉, abc는 가능성이 있는 암호이지만 bac는 그렇지 않다.\n\n새 보안 시스템에서 조교들이 암호로 사용했을 법한 문자의 종류는 C가지가 있다고 한다. 이 알파벳을 입수한 민식, 영식 형제는 조교들의 방에 침투하기 위해 암호를 추측해 보려고 한다. C개의 문자들이 모두 주어졌을 때, 가능성 있는 암호들을 모두 구하는 프로그램을 작성하시오.",
"첫째 줄에 테스트 케이스의 개수 T가 주어진다. 각 테스트 케이스는 한 줄로 이루어져 있고, 정수 n이 주어진다. n은 양수이며 10,000보다 작거나 같다.",
"각 테스트 케이스마다, n을 1, 2, 3의 합으로 나타내는 방법의 수를 출력한다.",
2, 128, 3, now(), now());

insert into `problem` 
(`platform`, `no`, `title`, `description`, `input`, `output`, `time`, `memory`, `tier_id`, `created_at`, `updated_at`)
value
("BOJ", 13549, "숨바꼭질 3",
"수빈이는 동생과 숨바꼭질을 하고 있다. 수빈이는 현재 점 N(0 ≤ N ≤ 100,000)에 있고, 동생은 점 K(0 ≤ K ≤ 100,000)에 있다. 수빈이는 걷거나 순간이동을 할 수 있다. 만약, 수빈이의 위치가 X일 때 걷는다면 1초 후에 X-1 또는 X+1로 이동하게 된다. 순간이동을 하는 경우에는 0초 후에 2*X의 위치로 이동하게 된다.\n\n수빈이와 동생의 위치가 주어졌을 때, 수빈이가 동생을 찾을 수 있는 가장 빠른 시간이 몇 초 후인지 구하는 프로그램을 작성하시오.",
"첫 번째 줄에 수빈이가 있는 위치 N과 동생이 있는 위치 K가 주어진다. N과 K는 정수이다.",
"수빈이가 동생을 찾는 가장 빠른 시간을 출력한다.",
2, 512, 3, now(), now());

insert into `problem` 
(`platform`, `no`, `title`, `description`, `input`, `output`, `time`, `memory`, `tier_id`, `created_at`, `updated_at`)
value
("BOJ", 16236, "아기 상어",
"N×N 크기의 공간에 물고기 M마리와 아기 상어 1마리가 있다. 공간은 1×1 크기의 정사각형 칸으로 나누어져 있다. 한 칸에는 물고기가 최대 1마리 존재한다.\n\n아기 상어와 물고기는 모두 크기를 가지고 있고, 이 크기는 자연수이다. 가장 처음에 아기 상어의 크기는 2이고, 아기 상어는 1초에 상하좌우로 인접한 한 칸씩 이동한다.\n\n아기 상어는 자신의 크기보다 큰 물고기가 있는 칸은 지나갈 수 없고, 나머지 칸은 모두 지나갈 수 있다. 아기 상어는 자신의 크기보다 작은 물고기만 먹을 수 있다. 따라서, 크기가 같은 물고기는 먹을 수 없지만, 그 물고기가 있는 칸은 지나갈 수 있다.\n\n아기 상어가 어디로 이동할지 결정하는 방법은 아래와 같다.\n\n· 더 이상 먹을 수 있는 물고기가 공간에 없다면 아기 상어는 엄마 상어에게 도움을 요청한다.\n· 먹을 수 있는 물고기가 1마리라면, 그 물고기를 먹으러 간다.\n· 먹을 수 있는 물고기가 1마리보다 많다면, 거리가 가장 가까운 물고기를 먹으러 간다.\t· 거리는 아기 상어가 있는 칸에서 물고기가 있는 칸으로 이동할 때, 지나야하는 칸의 개수의 최솟값이다.\t· 거리가 가까운 물고기가 많다면, 가장 위에 있는 물고기, 그러한 물고기가 여러마리라면, 가장 왼쪽에 있는 물고기를 먹는다.\n아기 상어의 이동은 1초 걸리고, 물고기를 먹는데 걸리는 시간은 없다고 가정한다. 즉, 아기 상어가 먹을 수 있는 물고기가 있는 칸으로 이동했다면, 이동과 동시에 물고기를 먹는다. 물고기를 먹으면, 그 칸은 빈 칸이 된다.\n\n아기 상어는 자신의 크기와 같은 수의 물고기를 먹을 때 마다 크기가 1 증가한다. 예를 들어, 크기가 2인 아기 상어는 물고기를 2마리 먹으면 크기가 3이 된다.\n\n공간의 상태가 주어졌을 때, 아기 상어가 몇 초 동안 엄마 상어에게 도움을 요청하지 않고 물고기를 잡아먹을 수 있는지 구하는 프로그램을 작성하시오.",
"첫째 줄에 공간의 크기 N(2 ≤ N ≤ 20)이 주어진다.\n\n둘째 줄부터 N개의 줄에 공간의 상태가 주어진다. 공간의 상태는 0, 1, 2, 3, 4, 5, 6, 9로 이루어져 있고, 아래와 같은 의미를 가진다.\n\n· 0: 빈 칸\n· 1, 2, 3, 4, 5, 6: 칸에 있는 물고기의 크기\n· 9: 아기 상어의 위치\n\n아기 상어는 공간에 한 마리 있다.",
"첫째 줄에 아기 상어가 엄마 상어에게 도움을 요청하지 않고 물고기를 잡아먹을 수 있는 시간을 출력한다.",
2, 512, 3, now(), now());

insert into `problem` 
(`platform`, `no`, `title`, `description`, `input`, `output`, `time`, `memory`, `tier_id`, `created_at`, `updated_at`)
value
("BOJ", 14226, "이모티콘",
"영선이는 매우 기쁘기 때문에, 효빈이에게 스마일 이모티콘을 S개 보내려고 한다.\n\n영선이는 이미 화면에 이모티콘 1개를 입력했다. 이제, 다음과 같은 3가지 연산만 사용해서 이모티콘을 S개 만들어 보려고 한다.\n\n1. 화면에 있는 이모티콘을 모두 복사해서 클립보드에 저장한다.\n2. 클립보드에 있는 모든 이모티콘을 화면에 붙여넣기 한다.\n3. 화면에 있는 이모티콘 중 하나를 삭제한다.\n\n모든 연산은 1초가 걸린다. 또, 클립보드에 이모티콘을 복사하면 이전에 클립보드에 있던 내용은 덮어쓰기가 된다. 클립보드가 비어있는 상태에는 붙여넣기를 할 수 없으며, 일부만 클립보드에 복사할 수는 없다. 또한, 클립보드에 있는 이모티콘 중 일부를 삭제할 수 없다. 화면에 이모티콘을 붙여넣기 하면, 클립보드에 있는 이모티콘의 개수가 화면에 추가된다.\n\n영선이가 S개의 이모티콘을 화면에 만드는데 걸리는 시간의 최솟값을 구하는 프로그램을 작성하시오.",
"첫째 줄에 S (2 ≤ S ≤ 1000) 가 주어진다.",
"첫째 줄에 이모티콘을 S개 만들기 위해 필요한 시간의 최솟값을 출력한다.",
2, 512, 3, now(), now());
